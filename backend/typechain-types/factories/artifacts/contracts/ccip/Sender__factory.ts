/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Sender,
  SenderInterface,
} from "../../../../artifacts/contracts/ccip/Sender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
    ],
    name: "DestinationChainNotAllowlisted",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidReceiverAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "NotEnoughMoney",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "amount",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ProposalSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "allowlistedChains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "bool",
        name: "vote",
        type: "bool",
      },
    ],
    name: "send_message",
    outputs: [
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620013be380380620013be833981810160405281019062000037919062000217565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200025e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001df82620001b2565b9050919050565b620001f181620001d2565b8114620001fd57600080fd5b50565b6000815190506200021181620001e6565b92915050565b60008060408385031215620002315762000230620001ad565b5b6000620002418582860162000200565b9250506020620002548582860162000200565b9150509250929050565b611150806200026e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630bb106eb1461005c578063715018a61461008c5780638da5cb5b14610096578063f2fde38b146100b4578063f4a786e4146100d0575b600080fd5b61007660048036038101906100719190610956565b610100565b604051610083919061099e565b60405180910390f35b610094610120565b005b61009e6101a8565b6040516100ab91906109fa565b60405180910390f35b6100ce60048036038101906100c99190610a41565b6101d1565b005b6100ea60048036038101906100e59190610a9a565b6102c8565b6040516100f79190610b06565b60405180910390f35b60036020528060005260406000206000915054906101000a900460ff1681565b610128610815565b73ffffffffffffffffffffffffffffffffffffffff166101466101a8565b73ffffffffffffffffffffffffffffffffffffffff161461019c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019390610b7e565b60405180910390fd5b6101a6600061081d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101d9610815565b73ffffffffffffffffffffffffffffffffffffffff166101f76101a8565b73ffffffffffffffffffffffffffffffffffffffff161461024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024490610b7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b390610c10565b60405180910390fd5b6102c58161081d565b50565b60006102d2610815565b73ffffffffffffffffffffffffffffffffffffffff166102f06101a8565b73ffffffffffffffffffffffffffffffffffffffff1614610346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033d90610b7e565b60405180910390fd5b60006040518060a00160405280856040516020016103649190610c78565b604051602081830303815290604052815260200184604051602001610389919061099e565b6040516020818303038152906040528152602001600067ffffffffffffffff8111156103b8576103b7610c93565b5b6040519080825280602002602001820160405280156103f157816020015b6103de6108e1565b8152602001906001900390816103d65790505b508152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016040518060200160405280620186a08152506040516020016104579190610cf7565b60405160208183030381529060405281525090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded87846040518363ffffffff1660e01b81526004016104ca929190610f29565b602060405180830381865afa1580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b9190610f85565b905080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161056991906109fa565b602060405180830381865afa158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa9190610f85565b101561068a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161060b91906109fa565b602060405180830381865afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190610f85565b816040517f3d8d9b53000000000000000000000000000000000000000000000000000000008152600401610681929190610fc1565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f98288856040518463ffffffff1660e01b81526004016106e8929190610f29565b60206040518083038185885af1158015610706573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061072b9190611016565b92508567ffffffffffffffff16837fafce261979d2c73e371096c12c07fcdf3e86c7a2d12f7c3621836fca8b843f798787600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516107909493929190611043565b60405180910390a3600360008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661080c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610803906110fa565b60405180910390fd5b50509392505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600067ffffffffffffffff82169050919050565b61093381610916565b811461093e57600080fd5b50565b6000813590506109508161092a565b92915050565b60006020828403121561096c5761096b610911565b5b600061097a84828501610941565b91505092915050565b60008115159050919050565b61099881610983565b82525050565b60006020820190506109b3600083018461098f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109e4826109b9565b9050919050565b6109f4816109d9565b82525050565b6000602082019050610a0f60008301846109eb565b92915050565b610a1e816109d9565b8114610a2957600080fd5b50565b600081359050610a3b81610a15565b92915050565b600060208284031215610a5757610a56610911565b5b6000610a6584828501610a2c565b91505092915050565b610a7781610983565b8114610a8257600080fd5b50565b600081359050610a9481610a6e565b92915050565b600080600060608486031215610ab357610ab2610911565b5b6000610ac186828701610941565b9350506020610ad286828701610a2c565b9250506040610ae386828701610a85565b9150509250925092565b6000819050919050565b610b0081610aed565b82525050565b6000602082019050610b1b6000830184610af7565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b68602083610b21565b9150610b7382610b32565b602082019050919050565b60006020820190508181036000830152610b9781610b5b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610bfa602683610b21565b9150610c0582610b9e565b604082019050919050565b60006020820190508181036000830152610c2981610bed565b9050919050565b60008160601b9050919050565b6000610c4882610c30565b9050919050565b6000610c5a82610c3d565b9050919050565b610c72610c6d826109d9565b610c4f565b82525050565b6000610c848284610c61565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b610cd581610cc2565b82525050565b602082016000820151610cf16000850182610ccc565b50505050565b6000602082019050610d0c6000830184610cdb565b92915050565b610d1b81610916565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d5b578082015181840152602081019050610d40565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d8382610d21565b610d8d8185610d2c565b9350610d9d818560208601610d3d565b610da681610d67565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610de6816109d9565b82525050565b604082016000820151610e026000850182610ddd565b506020820151610e156020850182610ccc565b50505050565b6000610e278383610dec565b60408301905092915050565b6000602082019050919050565b6000610e4b82610db1565b610e558185610dbc565b9350610e6083610dcd565b8060005b83811015610e91578151610e788882610e1b565b9750610e8383610e33565b925050600181019050610e64565b5085935050505092915050565b600060a0830160008301518482036000860152610ebb8282610d78565b91505060208301518482036020860152610ed58282610d78565b91505060408301518482036040860152610eef8282610e40565b9150506060830151610f046060860182610ddd565b5060808301518482036080860152610f1c8282610d78565b9150508091505092915050565b6000604082019050610f3e6000830185610d12565b8181036020830152610f508184610e9e565b90509392505050565b610f6281610cc2565b8114610f6d57600080fd5b50565b600081519050610f7f81610f59565b92915050565b600060208284031215610f9b57610f9a610911565b5b6000610fa984828501610f70565b91505092915050565b610fbb81610cc2565b82525050565b6000604082019050610fd66000830185610fb2565b610fe36020830184610fb2565b9392505050565b610ff381610aed565b8114610ffe57600080fd5b50565b60008151905061101081610fea565b92915050565b60006020828403121561102c5761102b610911565b5b600061103a84828501611001565b91505092915050565b600060808201905061105860008301876109eb565b611065602083018661098f565b61107260408301856109eb565b61107f6060830184610fb2565b95945050505050565b7f44657374696e6174696f6e20636861696e206e6f7420616c6c6f776c6973746560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006110e4602183610b21565b91506110ef82611088565b604082019050919050565b60006020820190508181036000830152611113816110d7565b905091905056fea2646970667358221220143b0dfd9461fb4f69a936de0be8782e358bbdfa8a5ac525df42c467eef8af1b64736f6c63430008130033";

type SenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Sender__factory extends ContractFactory {
  constructor(...args: SenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _link: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Sender> {
    return super.deploy(_link, _router, overrides || {}) as Promise<Sender>;
  }
  override getDeployTransaction(
    _link: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_link, _router, overrides || {});
  }
  override attach(address: string): Sender {
    return super.attach(address) as Sender;
  }
  override connect(signer: Signer): Sender__factory {
    return super.connect(signer) as Sender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SenderInterface {
    return new utils.Interface(_abi) as SenderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Sender {
    return new Contract(address, _abi, signerOrProvider) as Sender;
  }
}
